# # #
# dockerized nekoserv's services
#

version: '3.6'

networks:
  private0:
  dummy0:

services:

  main-services:
    image: hello-world
    container_name: main-services
    depends_on:
      - homepage
      - aria2-webui
      - flood
      - lidarr
      - medusa
      - metube
      - pyload
      - radarr
      - sabnzbd
      - traefik
      - trilium
      - vpn-services

  vpn-services:
    image: hello-world
    container_name: vpn-services
    depends_on:
      - aria2
      - jackett
      - nzbhydra2
      - openvpn-client
      - rtorrent
      - rtorrent-rpc2


  homepage:
    build:
      context: dockerfiles/homepage
      args:
        UID: 1000
        GID: 1000
        CUSTOM_JS: 1
    container_name: homepage
    networks:
      - private0
    expose:
      - "18083"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/homepage/config.yml:/home/homepage/assets/config.yml:ro
      - ~/docker-data/homepage/custom.js:/home/homepage/js/custom.js:ro
      - ~/docker-data/homepage/external-resources:/home/homepage/assets/external-resources:ro
      - ~/docker-data/homepage/icons:/home/homepage/assets/icons:ro
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/`)"
      - "traefik.http.routers.homepage.tls=true"
      - "traefik.http.routers.homepage.middlewares=global-auth@file"
      - "traefik.http.routers.homepage.tls.certresolver=default-ssl"


  aria2:
    build:
      context: dockerfiles/aria2
      args:
        UID: 1000
        GID: 1000
    container_name: aria2
    restart: unless-stopped
    depends_on:
      - openvpn-client
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    network_mode: service:openvpn-client
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/aria2/aria2.conf:/etc/aria2.conf:ro
      - ~/docker-data/aria2/session:/home/aria2/session
      - ~/docker-data/aria2/cache-aria2:/home/aria2/.cache/aria2
      - ~/docker-data/aria2/dl:/home/aria2/dl
      - /mnt/nas/share/aria2:/home/aria2/complete
      - ~/docker-data/aria2/scripts:/home/aria2/scripts
    read_only: true


  aria2-webui:
    build:
      context: dockerfiles/aria2-webui
      args:
        ARIA2_CONTAINER_NAME: openvpn-client
        ARIA2_PORT: 6801
        ARIA2_TOKEN: $ARG_ARIA2_TOKEN
    container_name: aria2-webui
    networks:
      - private0
    expose:
      - "18082"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aria2.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/aria2`)"
      - "traefik.http.routers.aria2.tls=true"
      - "traefik.http.middlewares.aria2-stripprefix.stripprefix.prefixes=/aria2"
      - "traefik.http.routers.aria2.middlewares=aria2-auth-and-prefix"
      - "traefik.http.middlewares.aria2-auth-and-prefix.chain.middlewares=global-auth@file,aria2-stripprefix@docker"
      - "traefik.http.routers.aria2.tls.certresolver=default-ssl"


  flood:
    build:
      context: dockerfiles/flood
      args:
        UID: 1000
        GID: 1000
    container_name: flood
    networks:
      - private0
    expose:
      - "3000"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
      - FLOOD_OPTION_baseuri=/flood/
      - FLOOD_OPTION_host=0.0.0.0
      - FLOOD_OPTION_rundir=/home/flood/data/
      - FLOOD_OPTION_secret=$ENV_FLOOD_SECRET
      - FLOOD_OPTION_noauth=true
      - FLOOD_OPTION_rthost=$ENV_FLOOD_RT_HOST
      - FLOOD_OPTION_rtport=$ENV_FLOOD_RT_PORT
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/flood:/home/flood/data
      - ~/docker-data/dl/incomplete/torrent:/home/incomplete:ro
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flood.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/flood`)"
      - "traefik.http.routers.flood.tls=true"
      - "traefik.http.routers.flood.middlewares=global-auth@file"
      - "traefik.http.routers.flood.tls.certresolver=default-ssl"


  jackett:
    build:
      context: dockerfiles/jackett
      args:
        UID: 1000
        GID: 1000
    container_name: jackett
    depends_on:
      - openvpn-client
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    network_mode: service:openvpn-client
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/jackett:/home/jackett/data
    read_only: true


  lidarr:
    build:
      context: dockerfiles/lidarr
      args:
        UID: 1000
        GID: 1000
    container_name: lidarr
    networks:
      - private0
    expose:
      - "8686"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/lidarr:/home/lidarr/data
      - ~/docker-data/dl/postprocessing/music:/home/postprocessing/music
      - /mnt/nas/musics:/home/lidarr/dl
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/lidarr`)"
      - "traefik.http.routers.lidarr.tls=true"
      - "traefik.http.routers.lidarr.middlewares=global-auth@file"
      - "traefik.http.routers.lidarr.tls.certresolver=default-ssl"


  medusa:
    build:
      context: dockerfiles/medusa
      args:
        UID: 1000
        GID: 1000
    container_name: medusa
    networks:
      - private0
    expose:
      - "8081"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/medusa:/home/medusa/data
      - ~/docker-data/dl/postprocessing/tv:/home/postprocessing/tv
      - /mnt/nas/SERIES:/home/medusa/dl
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.medusa.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/medusa`)"
      - "traefik.http.routers.medusa.tls=true"
      - "traefik.http.routers.medusa.middlewares=global-auth@file"
      - "traefik.http.routers.medusa.tls.certresolver=default-ssl"


  metube:
    build:
      context: dockerfiles/metube
      args:
        UID: 1000
        GID: 1000
    container_name: metube
    networks:
      - dummy0
    expose:
      - "8081"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
      - URL_PREFIX=/metube/
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/dl/incomplete/metube:/downloads
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.metube.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/metube`)"
      - "traefik.http.routers.metube.tls=true"
      - "traefik.http.routers.metube.middlewares=global-auth@file"
      - "traefik.http.routers.metube.tls.certresolver=default-ssl"


  nzbhydra2:
    build:
      context: dockerfiles/nzbhydra2
      args:
        UID: 1000
        GID: 1000
    container_name: nzbhydra2
    depends_on:
      - openvpn-client
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    network_mode: service:openvpn-client
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp:exec
    volumes:
      - ~/docker-data/nzbhydra2/data:/home/nzbhydra2/data
    read_only: true


  openvpn-client:
    build: dockerfiles/openvpn-client
    container_name: openvpn-client
    cap_add:
      - net_admin
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    restart: unless-stopped
    networks:
      - private0
    expose:
      - "5001"
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /run
      - /tmp
    volumes:
      - /dev/net:/dev/net:z
      - ~/docker-data/openvpn-config:/etc/openvpn/conf:ro
    read_only: true
    healthcheck:
      test: ["CMD", "ping", "-c1", "-W1", "10.8.0.1"]
      interval: 1m
      timeout: 2s
      retries: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/jackett`)"
      - "traefik.http.routers.jackett.tls=true"
      - "traefik.http.routers.jackett.middlewares=global-auth@file"
      - "traefik.http.routers.jackett.tls.certresolver=default-ssl"
      - "traefik.http.routers.jackett.service=service-jackett"
      - "traefik.http.services.service-jackett.loadbalancer.server.port=9117"
      - "traefik.http.routers.nzbhydra2.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/nzbhydra`)"
      - "traefik.http.routers.nzbhydra2.tls=true"
      - "traefik.http.routers.nzbhydra2.middlewares=global-auth@file"
      - "traefik.http.routers.nzbhydra2.tls.certresolver=default-ssl"
      - "traefik.http.routers.nzbhydra2.service=service-nzbhydra2"
      - "traefik.http.services.service-nzbhydra2.loadbalancer.server.port=5076"


  pyload:
    build:
      context: dockerfiles/pyload
      args:
        UID: 1000
        GID: 1000
    container_name: pyload
    networks:
      - dummy0
    expose:
      - "8000"
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/pyload/conf:/home/pyload/.pyload
      - ~/docker-data/pyload/plugins:/home/pyload/module/plugins
      - ~/docker-data/dl/incomplete/pyload:/home/pyload/dl
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pyload.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/pyload`)"
      - "traefik.http.routers.pyload.tls=true"
      - "traefik.http.routers.pyload.middlewares=global-auth@file"
      - "traefik.http.routers.pyload.tls.certresolver=default-ssl"


  radarr:
    build:
      context: dockerfiles/radarr
      args:
        UID: 1000
        GID: 1000
    container_name: radarr
    networks:
      - private0
    expose:
      - "7878"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/radarr:/home/radarr/data
      - ~/docker-data/dl/postprocessing/movies:/home/postprocessing/movies
      - /mnt/nas/FILMS:/home/radarr/dl
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/radarr`)"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.middlewares=global-auth@file"
      - "traefik.http.routers.radarr.tls.certresolver=default-ssl"


  rtorrent:
    build:
      context: dockerfiles/rtorrent
      args:
        UID: 1000
        GID: 1000
    container_name: rtorrent
    restart: unless-stopped
    depends_on:
      - openvpn-client
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    network_mode: service:openvpn-client
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/rtorrent/config:/home/rtorrent
      - ~/docker-data/rtorrent/session:/home/rtorrent/session
      - ~/docker-data/nzbToMedia:/home/rtorrent/nzbToMedia
      - /mnt/nas/share:/home/rtorrent/share
      - ~/docker-data/dl/incomplete/torrent:/home/incomplete
      - ~/docker-data/dl/postprocessing:/home/postprocessing
      - ~/docker-data/flood/temp:/home/flood/data/temp:ro
    read_only: true
    stdin_open: true
    tty: true


  rtorrent-rpc2:
    build:
      context: dockerfiles/rtorrent-rpc2
      args:
        CONTAINER_NAME: openvpn-client
        RTORRENT_PORT: 5001
    container_name: rtorrent-rpc2
    networks:
      - private0
    expose:
      - "18081"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    read_only: true


  sabnzbd:
    build:
      context: dockerfiles/sabnzbd
      args:
        UID: 1000
        GID: 1000
    container_name: sabnzbd
    networks:
      - private0
    expose:
      - "8080"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/sabnzbd:/home/sabnzbd/config
      - ~/docker-data/nzbToMedia:/home/sabnzbd/nzbToMedia
      - /mnt/nas/share:/home/sabnzbd/complete
      - ~/docker-data/dl/incomplete/nzb:/home/incomplete
      - ~/docker-data/dl/postprocessing:/home/postprocessing
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/sabnzbd`)"
      - "traefik.http.routers.sabnzbd.tls=true"
      - "traefik.http.routers.sabnzbd.middlewares=global-auth@file"
      - "traefik.http.routers.sabnzbd.tls.certresolver=default-ssl"


  traefik:
    image: traefik:2.4
    container_name: traefik
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
    restart: unless-stopped
    networks:
      - private0
      - dummy0
    ports:
      - "443:443"
    environment:
      - TZ=$ENV_TIMEZONE
      - OVH_ENDPOINT=$ENV_OVH_ENDPOINT
      - OVH_APPLICATION_KEY=$ENV_OVH_APPLICATION_KEY
      - OVH_APPLICATION_SECRET=$ENV_OVH_APPLICATION_SECRET
      - OVH_CONSUMER_KEY=$ENV_OVH_CONSUMER_KEY
    tmpfs:
      - /tmp
    volumes:
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ~/docker-data/traefik/conf:/etc/traefik:ro
      - ~/docker-data/traefik/ssl:/etc/traefik-ssl
    read_only: true


  trilium:
    image: zadam/trilium
    container_name: trilium
    networks:
      - dummy0
    expose:
      - "32698"
    restart: unless-stopped
    environment:
      - TZ=$ENV_TIMEZONE
      - TRILIUM_DATA_DIR=/data
      - TRILIUM_PORT=32698
    tmpfs:
      - /tmp
    volumes:
      - ~/docker-data/trilium:/data
    read_only: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.trilium.rule=Host(`$ENV_DOMAIN`) && PathPrefix(`/trilium`)"
      - "traefik.http.routers.trilium.tls=true"
      - "traefik.http.middlewares.trilium-stripprefix.stripprefix.prefixes=/trilium"
      - "traefik.http.routers.trilium.middlewares=trilium-auth-and-prefix"
      - "traefik.http.middlewares.trilium-auth-and-prefix.chain.middlewares=global-auth@file,trilium-stripprefix@docker"
      - "traefik.http.routers.trilium.tls.certresolver=default-ssl"
      - "traefik.http.routers.trilium.service=service-trilium"
      - "traefik.http.services.service-trilium.loadbalancer.server.port=32698"
